<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>top-level-items</key>
	<array>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>93</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>92</string>
					<key>Timestamp</key>
					<string>752714240.897341</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>IDRMacOSApp/Services/ServerManagerService.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        //TODO:  For now, accept any invitation. Later, we can check against an approved devices list.
</string>
				<key>leading</key>
				<string>                    withContext context: Data?, invitationHandler: @escaping (Bool, MCSession?) -&gt; Void) {
        Logger.shared.log("Server received invitation from \(peerID.displayName). Accepting invitation.")
</string>
				<key>trailing</key>
				<string>        invitationHandler(true, session)
    }

</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>13</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>13</string>
					<key>Timestamp</key>
					<string>752797971.030082</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Shared/Services/PeerManagerService.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string></string>
				<key>leading</key>
				<string>

</string>
				<key>trailing</key>
				<string>//TODO: Figure out scenarios for when 2 client devices are paired to the same server, how to show on the client side that the server needs to be cleared if they want to connect.
//: Space out the invites to be every 5 seconds, and only try for 30 seconds until the user press the retry button
class PeerManager: NSObject, ObservableObject, MCSessionDelegate, MCNearbyServiceAdvertiserDelegate, MCNearbyServiceBrowserDelegate {
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>14</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>14</string>
					<key>Timestamp</key>
					<string>752797977.112606</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Shared/Services/PeerManagerService.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string></string>
				<key>leading</key>
				<string>
//TODO: Figure out scenarios for when 2 client devices are paired to the same server, how to show on the client side that the server needs to be cleared if they want to connect.
</string>
				<key>trailing</key>
				<string>//: Space out the invites to be every 5 seconds, and only try for 30 seconds until the user press the retry button
class PeerManager: NSObject, ObservableObject, MCSessionDelegate, MCNearbyServiceAdvertiserDelegate, MCNearbyServiceBrowserDelegate {

</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>28</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>27</string>
					<key>Timestamp</key>
					<string>753244412.573945</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SurgeonITPClient/Services/BeaconManagerService.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        //TODO: Move notification code somewhere else
</string>
				<key>leading</key>
				<string>        }
        self.beaconUUID = uuid
</string>
				<key>trailing</key>
				<string>        self.notificationCenter = UNUserNotificationCenter.current()
        super.init()
        requestNotificationAuthorization()
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>35</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>34</string>
					<key>Timestamp</key>
					<string>753244401.27297</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Shared/Services/PeerManagerService.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>    //TODO: Refactor this to take in a server or client role
</string>
				<key>leading</key>
				<string>    private var savedClientPeerID: MCPeerID?

</string>
				<key>trailing</key>
				<string>    override init() {
        // Define the displayName for peerID based on platform
        let displayName: String = {
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>379</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>378</string>
					<key>Timestamp</key>
					<string>753229980.5103281</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SurgeonITPClient/ViewModels/SessionViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>
</string>
				<key>leading</key>
				<string>        self.remoteControlHelper = remoteControlHelper

</string>
				<key>trailing</key>
				<string>        //TODO: Add more comments around this and the related scenarios
        if canControlCamera {
            let result = remoteControlHelper.giveUpControlRemoteCamera()
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>69</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>68</string>
					<key>Timestamp</key>
					<string>753229980.510293</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SurgeonITPClient/ViewModels/SessionViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        //TODO: Save this into firebase or something and add some validation steps
</string>
				<key>leading</key>
				<string>    /// - Returns: A JWT token string if successful; otherwise, an empty string.
    func getJWTToken() -&gt; String {
</string>
				<key>trailing</key>
				<string>        let zoomJWT = ZoomAPIJWT(apiKey: "vWORwGngSfyZ4PIio6bqCg", apiSecret: "i3II29cNHHnL98vc0qGtVbp3SrVC3yYv2vIT")
        //let zoomJWT = ZoomAPIJWT(apiKey: "apikey", apiSecret: "secret")
        let roleType = 0  // 1 for host, 0 for participant
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>38</string>
					<key>EndingLineNumber</key>
					<string>418</string>
					<key>StartingColumnNumber</key>
					<string>38</string>
					<key>StartingLineNumber</key>
					<string>418</string>
					<key>Timestamp</key>
					<string>753233331.487206</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SurgeonITPClient/ViewModels/SessionViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string></string>
				<key>leading</key>
				<string>            return
        }
        //TODO: try to get camera name</string>
				<key>trailing</key>
				<string>
        let result = remoteControlHelper.turnLeft(range)
        if result == .Errors_Success {
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>5</string>
					<key>EndingLineNumber</key>
					<string>15</string>
					<key>StartingColumnNumber</key>
					<string>5</string>
					<key>StartingLineNumber</key>
					<string>15</string>
					<key>Timestamp</key>
					<string>753241602.163358</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SurgeonITPClient/Services/BeaconManagerService.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string></string>
				<key>leading</key>
				<string>class BeaconManagerService: NSObject, ObservableObject {
    @Published var proximity: CLProximity = .unknown
    /</string>
				<key>trailing</key>
				<string>/TODO: Create a published var that represents if the device is inside a beacon region.
    private var locationManager: CLLocationManager?
    private let beaconUUID: UUID
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>119</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>118</string>
					<key>Timestamp</key>
					<string>753243541.863561</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SurgeonITPClient/ViewModels/ClientViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        //TODO: Disable beacon ranging once an MPC session is confirmed, only enable it again once the mpc session has been lost and not able to reconnect
</string>
				<key>leading</key>
				<string>

</string>
				<key>trailing</key>
				<string>        // Handle proximity changes
        beaconManager.$proximity
            .sink { [weak self] proximity in
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>3</string>
					<key>EndingLineNumber</key>
					<string>15</string>
					<key>StartingColumnNumber</key>
					<string>3</string>
					<key>StartingLineNumber</key>
					<string>15</string>
					<key>Timestamp</key>
					<string>753243415.770974</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SurgeonITPClient/SurgeonITPClientApp.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string></string>
				<key>leading</key>
				<string>

   </string>
				<key>trailing</key>
				<string> //TODO: Move somewhere else
    init() {
        setupSDK()
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>53</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>52</string>
					<key>Timestamp</key>
					<string>753244298.947139</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Shared/Services/PeerManagerService.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        //TODO: Create load data method based on the target
</string>
				<key>leading</key>
				<string>

</string>
				<key>trailing</key>
				<string>        // iOS should save/load the latest saved server
        // macOS should save/load the latest saved client

</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
	</array>
</dict>
</plist>
