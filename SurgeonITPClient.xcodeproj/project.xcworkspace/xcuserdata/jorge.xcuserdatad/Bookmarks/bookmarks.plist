<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>top-level-items</key>
	<array>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>82</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>81</string>
					<key>Timestamp</key>
					<string>752803686.449695</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SurgeonITPClient/Services/BeaconManagerService.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        // TODO: Save data into user defauls or coreData along with the beaconId
</string>
				<key>leading</key>
				<string>        ///
        ///
</string>
				<key>trailing</key>
				<string>        Logger.shared.log("Creating notification: \(title) - \(body)")
        let content = UNMutableNotificationContent()
        content.title = title
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>77</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>76</string>
					<key>Timestamp</key>
					<string>752803686.450083</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SurgeonITPClient/Services/BeaconManagerService.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        //TODO: Keep track of the last time a notification was created
</string>
				<key>leading</key>
				<string>    /// Creates and schedules a local notification.
    private func createNotification(title: String, body: String) {
</string>
				<key>trailing</key>
				<string>        /// Have a time gap between each local push notification to be at least x amounts of minutes
        /// For Testing 5 minutes, For demos 20 minutes
        ///
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>93</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>92</string>
					<key>Timestamp</key>
					<string>752714240.897341</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>IDRMacOSApp/Services/ServerManagerService.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        //TODO:  For now, accept any invitation. Later, we can check against an approved devices list.
</string>
				<key>leading</key>
				<string>                    withContext context: Data?, invitationHandler: @escaping (Bool, MCSession?) -&gt; Void) {
        Logger.shared.log("Server received invitation from \(peerID.displayName). Accepting invitation.")
</string>
				<key>trailing</key>
				<string>        invitationHandler(true, session)
    }

</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>13</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>13</string>
					<key>Timestamp</key>
					<string>752797971.030082</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Shared/Services/PeerManagerService.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string></string>
				<key>leading</key>
				<string>

</string>
				<key>trailing</key>
				<string>//TODO: Figure out scenarios for when 2 client devices are paired to the same server, how to show on the client side that the server needs to be cleared if they want to connect.
//: Space out the invites to be every 5 seconds, and only try for 30 seconds until the user press the retry button
class PeerManager: NSObject, ObservableObject, MCSessionDelegate, MCNearbyServiceAdvertiserDelegate, MCNearbyServiceBrowserDelegate {
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>14</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>14</string>
					<key>Timestamp</key>
					<string>752797977.112606</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Shared/Services/PeerManagerService.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string></string>
				<key>leading</key>
				<string>
//TODO: Figure out scenarios for when 2 client devices are paired to the same server, how to show on the client side that the server needs to be cleared if they want to connect.
</string>
				<key>trailing</key>
				<string>//: Space out the invites to be every 5 seconds, and only try for 30 seconds until the user press the retry button
class PeerManager: NSObject, ObservableObject, MCSessionDelegate, MCNearbyServiceAdvertiserDelegate, MCNearbyServiceBrowserDelegate {

</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>7</string>
					<key>EndingLineNumber</key>
					<string>24</string>
					<key>StartingColumnNumber</key>
					<string>7</string>
					<key>StartingLineNumber</key>
					<string>24</string>
					<key>Timestamp</key>
					<string>752803697.695055</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SurgeonITPClient/Services/BeaconManagerService.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string></string>
				<key>leading</key>
				<string>    override init() {
        Logger.shared.log("BeaconManager initialized.")
       </string>
				<key>trailing</key>
				<string> //TODO: Move notification code somewhere else
        self.notificationCenter = UNUserNotificationCenter.current()
        super.init()
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>194</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>193</string>
					<key>Timestamp</key>
					<string>752803940.505792</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Shared/Services/PeerManagerService.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>                //TODO: Stop browsing once connected
</string>
				<key>leading</key>
				<string>                }

</string>
				<key>trailing</key>
				<string>
#if os(macOS)
                if self.savedClientPeerID == nil {
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>8</string>
					<key>EndingLineNumber</key>
					<string>37</string>
					<key>StartingColumnNumber</key>
					<string>8</string>
					<key>StartingLineNumber</key>
					<string>37</string>
					<key>Timestamp</key>
					<string>752803963.985382</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Shared/Services/PeerManagerService.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string></string>
				<key>leading</key>
				<string>    }

    //TO</string>
				<key>trailing</key>
				<string>DO: Refactor this to take in a server or client role
    override init() {
        // Define the displayName for peerID based on platform
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>425</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>424</string>
					<key>Timestamp</key>
					<string>753139623.669507</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SurgeonITPClient/ViewModels/SessionViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        }
</string>
				<key>leading</key>
				<string>            Logger.shared.log("SessionViewModel - Remote control helper is not available")
            return
</string>
				<key>trailing</key>
				<string>        //TODO: try to get camera name
        let result = remoteControlHelper.turnLeft(range)
        if result == .Errors_Success {
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>386</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>385</string>
					<key>Timestamp</key>
					<string>753139623.669487</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SurgeonITPClient/ViewModels/SessionViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>
</string>
				<key>leading</key>
				<string>        self.remoteControlHelper = remoteControlHelper

</string>
				<key>trailing</key>
				<string>        //TODO: Add more comments around this and the related scenarios
        if canControlCamera {
            let result = remoteControlHelper.giveUpControlRemoteCamera()
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>7</string>
					<key>EndingLineNumber</key>
					<string>75</string>
					<key>StartingColumnNumber</key>
					<string>7</string>
					<key>StartingLineNumber</key>
					<string>75</string>
					<key>Timestamp</key>
					<string>753139368.991498</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SurgeonITPClient/ViewModels/SessionViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string></string>
				<key>leading</key>
				<string>    /// - Returns: A JWT token string if successful; otherwise, an empty string.
    func getJWTToken() -&gt; String {
       </string>
				<key>trailing</key>
				<string> //TODO: Save this into firebase or something and add some validation steps
        let zoomJWT = ZoomAPIJWT(apiKey: "vWORwGngSfyZ4PIio6bqCg", apiSecret: "i3II29cNHHnL98vc0qGtVbp3SrVC3yYv2vIT")
        //let zoomJWT = ZoomAPIJWT(apiKey: "apikey", apiSecret: "secret")
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
	</array>
</dict>
</plist>
