<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>top-level-items</key>
	<array>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>93</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>92</string>
					<key>Timestamp</key>
					<string>752714240.897341</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>IDRMacOSApp/Services/ServerManagerService.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        //TODO:  For now, accept any invitation. Later, we can check against an approved devices list.
</string>
				<key>leading</key>
				<string>                    withContext context: Data?, invitationHandler: @escaping (Bool, MCSession?) -&gt; Void) {
        Logger.shared.log("Server received invitation from \(peerID.displayName). Accepting invitation.")
</string>
				<key>trailing</key>
				<string>        invitationHandler(true, session)
    }

</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>15</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>14</string>
					<key>Timestamp</key>
					<string>753305230.274101</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Shared/Services/PeerManagerService.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>//TODO: Figure out scenarios for when 2 client devices are paired to the same server, how to show on the client side that the server needs to be cleared if they want to connect.
</string>
				<key>leading</key>
				<string>

</string>
				<key>trailing</key>
				<string>//: Space out the invites to be every 5 seconds, and only try for 30 seconds until the user press the retry button
class PeerManager: NSObject, ObservableObject, MCSessionDelegate, MCNearbyServiceAdvertiserDelegate, MCNearbyServiceBrowserDelegate {

</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>16</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>15</string>
					<key>Timestamp</key>
					<string>753305230.274116</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Shared/Services/PeerManagerService.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>//: Space out the invites to be every 5 seconds, and only try for 30 seconds until the user press the retry button
</string>
				<key>leading</key>
				<string>
//TODO: Figure out scenarios for when 2 client devices are paired to the same server, how to show on the client side that the server needs to be cleared if they want to connect.
</string>
				<key>trailing</key>
				<string>class PeerManager: NSObject, ObservableObject, MCSessionDelegate, MCNearbyServiceAdvertiserDelegate, MCNearbyServiceBrowserDelegate {

    // MARK: Published properties
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>49</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>48</string>
					<key>Timestamp</key>
					<string>753553526.445214</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Shared/Services/PeerManagerService.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>    //TODO: Refactor this to take in a server or client role
</string>
				<key>leading</key>
				<string>    // MARK: - Initialization

</string>
				<key>trailing</key>
				<string>    override init() {
        // Define the displayName for peerID based on platform
        let displayName: String = {
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>109</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>108</string>
					<key>Timestamp</key>
					<string>753746508.315619</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SurgeonITPClient/ViewModels/SessionViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        //TODO: Save this into firebase or something and add some validation steps
</string>
				<key>leading</key>
				<string>    /// - Returns: A JWT token string if successful; otherwise, an empty string.
    func getJWTToken() -&gt; String {
</string>
				<key>trailing</key>
				<string>        let zoomJWT = ZoomAPIJWT(apiKey: Constants.zoomAPIKey , apiSecret: Constants.zoomAPISecret)
        let roleType = 0  // 1 for host, 0 for participant

</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>126</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>125</string>
					<key>Timestamp</key>
					<string>753842228.005851</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SurgeonITPClient/ViewModels/ClientViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>
</string>
				<key>leading</key>
				<string>            .assign(to: \.proximity, on: self)
            .store(in: &amp;cancellables)
</string>
				<key>trailing</key>
				<string>
        //TODO: Disable beacon ranging once an MPC session is confirmed, only enable it again once the mpc session has been lost and not able to reconnect
        // Handle proximity changes
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>3</string>
					<key>EndingLineNumber</key>
					<string>15</string>
					<key>StartingColumnNumber</key>
					<string>3</string>
					<key>StartingLineNumber</key>
					<string>15</string>
					<key>Timestamp</key>
					<string>753243415.770974</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SurgeonITPClient/SurgeonITPClientApp.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string></string>
				<key>leading</key>
				<string>

   </string>
				<key>trailing</key>
				<string> //TODO: Move somewhere else
    init() {
        setupSDK()
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>67</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>66</string>
					<key>Timestamp</key>
					<string>753553526.445197</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Shared/Services/PeerManagerService.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        //TODO: Create load data method based on the target
</string>
				<key>leading</key>
				<string>

</string>
				<key>trailing</key>
				<string>        // iOS should save/load the latest saved server
        // macOS should save/load the latest saved client

</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
	</array>
</dict>
</plist>
